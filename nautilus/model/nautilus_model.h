#ifndef add_h
#define add_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>

#define FIXED_EXPONENT 9

#define FIXED_PRECISION 0.000000001

typedef enum BookLevel {
  L1 = 1,
  L2 = 2,
  L3 = 3,
} BookLevel;

typedef enum OrderSide {
  Buy = 1,
  Sell = 2,
} OrderSide;

typedef struct BTreeMap_BookPrice__Level BTreeMap_BookPrice__Level;

typedef struct HashMap_u64__BookPrice HashMap_u64__BookPrice;

typedef struct String String;

typedef struct Symbol {
  struct String *value;
} Symbol;

typedef struct Venue {
  struct String *value;
} Venue;

typedef struct InstrumentId {
  struct Symbol symbol;
  struct Venue venue;
  struct String *value;
} InstrumentId;

typedef struct Price {
  int64_t mantissa;
  uint8_t precision;
} Price;

typedef struct Quantity {
  uint64_t mantissa;
  uint8_t precision;
} Quantity;

typedef struct Ladder {
  enum OrderSide side;
  struct BTreeMap_BookPrice__Level *levels;
  struct HashMap_u64__BookPrice *cache;
} Ladder;

typedef struct OrderBook {
  struct Ladder bids;
  struct Ladder asks;
  struct InstrumentId instrument_id;
  enum BookLevel book_level;
  enum OrderSide last_side;
  int64_t ts_last;
} OrderBook;

void instrument_id_free(struct InstrumentId id);

uintptr_t instrument_id_len(struct InstrumentId id);

const uint8_t *instrument_id_as_utf8(const struct InstrumentId *self);

struct Symbol symbol_new(uint8_t *ptr, uintptr_t length);

void symbol_free(struct Symbol s);

uintptr_t symbol_len(struct Symbol s);

const uint8_t *symbol_as_utf8(const struct Symbol *self);

struct Venue venue_new(uint8_t *ptr, uintptr_t length);

void venue_free(struct Venue v);

uintptr_t venue_len(struct Venue v);

const uint8_t *venue_as_utf8(const struct Venue *self);

struct Price price_new(double value, uint8_t precision);

struct Quantity quantity_new(double value, uint8_t precision);

struct OrderBook order_book_new(struct InstrumentId instrument_id, enum BookLevel book_level);

#endif /* add_h */
